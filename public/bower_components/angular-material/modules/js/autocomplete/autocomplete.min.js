/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.8.1
 */
!function(){"use strict";angular.module("material.components.autocomplete",["material.core","material.components.icon"])}(),function(){"use strict";function e(e,t,n,a,l,i){function o(){m(),c()}function c(){var e=angular.element(T.ul),t=angular.element(T.input),n=e.attr("id")||"ul_"+l.nextUid();e.attr("id",n),t.attr("aria-owns",n)}function r(t){if(t){var n={};return $.itemName&&(n[$.itemName]=e.selectedItem),n}}function m(){e.$watch("searchText",function(t){if($.index=-1,!t||t.length<Math.max(parseInt(e.minLength,10),1))return $.loading=!1,$.matches=[],$.hidden=h(),void 0;var n=t.toLowerCase();b&&b.cancel&&(b.cancel(),b=null),!e.noCache&&E[n]?$.matches=E[n]:$.fetch(t),$.hidden=h(),e.textChange&&e.textChange(r(e.selectedItem))}),e.$watch("selectedItem",function(t){e.itemChange&&e.itemChange(r(t))})}function d(t){function n(n){E[i]=n,t===e.searchText&&(b=null,$.loading=!1,$.matches=n,$.hidden=h())}var l=e.$parent.$eval(v),i=t.toLowerCase();angular.isArray(l)?n(l):($.loading=!0,b=a.when(l).then(n))}function u(){$.hidden=!0}function s(e){switch(e.keyCode){case i.KEY_CODE.DOWN_ARROW:if($.loading)return;e.preventDefault(),$.index=Math.min($.index+1,$.matches.length-1),C();break;case i.KEY_CODE.UP_ARROW:if($.loading)return;e.preventDefault(),$.index=Math.max(0,$.index-1),C();break;case i.KEY_CODE.ENTER:if($.loading||$.index<0)return;e.preventDefault(),f($.index);break;case i.KEY_CODE.ESCAPE:$.matches=[],$.hidden=!0,$.index=-1;break;case i.KEY_CODE.TAB:}}function p(){e.searchText="",f(-1),T.input.focus()}function h(){return 1===$.matches.length&&e.searchText===x($.matches[0])}function g(){return x($.matches[$.index])}function x(t){return t&&e.itemText?e.itemText(r(t)):t}function f(t){e.selectedItem=$.matches[t],e.searchText=x(e.selectedItem)||e.searchText,$.hidden=!0,$.index=-1,$.matches=[]}function C(){var e=41*$.index,t=e+41,n=225.5;e<T.ul.scrollTop?T.ul.scrollTop=e:t>T.ul.scrollTop+n&&(T.ul.scrollTop=t-n)}var $=this,A=e.itemsExpr.split(/ in /i),v=A[1],T={main:t[0],ul:t[0].getElementsByTagName("ul")[0],input:t[0].getElementsByTagName("input")[0]},b=null,E={};return $.scope=e,$.parent=e.$parent,$.itemName=A[0],$.matches=[],$.loading=!1,$.hidden=!0,$.index=0,$.keydown=s,$.blur=u,$.clear=p,$.select=f,$.getCurrentDisplayValue=g,$.fetch=l.debounce(d),o()}angular.module("material.components.autocomplete").controller("MdAutocompleteCtrl",e),e.$inject=["$scope","$element","$timeout","$q","$mdUtil","$mdConstant"]}(),function(){"use strict";function e(){return{template:'        <md-autocomplete-wrap role="listbox">          <input type="text"              ng-disabled="isDisabled"              ng-model="searchText"              ng-keydown="$mdAutocompleteCtrl.keydown($event)"              ng-blur="$mdAutocompleteCtrl.blur()"              placeholder="{{placeholder}}"              aria-label="{{placeholder}}"              aria-autocomplete="list"              aria-haspopup="true"              aria-activedescendant=""              aria-expanded="{{!$mdAutocompleteCtrl.hidden}}"/>          <button              type="button"              ng-if="searchText"              ng-click="$mdAutocompleteCtrl.clear()">              <md-icon md-svg-icon="cancel"></md-icon>              <span class="visually-hidden">Clear</span>              </button>          <md-progress-linear ng-if="$mdAutocompleteCtrl.loading" md-mode="indeterminate"></md-progress-linear>        </md-autocomplete-wrap>        <ul role="presentation">          <li ng-repeat="(index, item) in $mdAutocompleteCtrl.matches"              ng-class="{ selected: index === $mdAutocompleteCtrl.index }"              ng-show="searchText && !$mdAutocompleteCtrl.hidden"              ng-click="$mdAutocompleteCtrl.select(index)"              ng-transclude              md-autocomplete-list-item="$mdAutocompleteCtrl.itemName">          </li>        </ul>        <aria-status            class="visually-hidden"            role="status"            aria-live="assertive">          <p ng-if="$mdAutocompleteCtrl.index === -1 && $mdAutocompleteCtrl.matches.length === 1">There is 1 match available.</p>          <p ng-if="$mdAutocompleteCtrl.index === -1 && $mdAutocompleteCtrl.matches.length > 1">There are {{$mdAutocompleteCtrl.matches.length}} matches available.</p>          <p ng-if="$mdAutocompleteCtrl.index >= 0">{{ $mdAutocompleteCtrl.getCurrentDisplayValue() }}</p>        </aria-status>',transclude:!0,controller:"MdAutocompleteCtrl",controllerAs:"$mdAutocompleteCtrl",scope:{searchText:"=mdSearchText",selectedItem:"=mdSelectedItem",itemsExpr:"@mdItems",itemText:"&mdItemText",placeholder:"@placeholder",noCache:"=mdNoCache",itemChange:"&mdSelectedItemChange",textChange:"&mdSearchTextChange",isDisabled:"=ngDisabled",minLength:"=mdMinLength"}}}angular.module("material.components.autocomplete").directive("mdAutocomplete",e)}(),function(){"use strict";function e(e,t,n){function a(e){return e?e.replace(/[\*\[\]\(\)\{\}\\\^\$]/g,"\\$&"):e}var l=t.attr("md-highlight-text"),i=n(t.text())(e);e.$watch(l,function(e){var n=new RegExp("^"+a(e),"i"),l=i.replace(n,'<span class="highlight">$&</span>');t.html(l)})}angular.module("material.components.autocomplete").controller("MdHighlightCtrl",e),e.$inject=["$scope","$element","$interpolate"]}(),function(){"use strict";function e(){return{terminal:!0,scope:!1,controller:"MdHighlightCtrl"}}angular.module("material.components.autocomplete").directive("mdHighlightText",e)}(),function(){"use strict";function e(e,t){function n(n,a,l,i){var o=i.parent.$new(!1,i.parent),c=i.scope.$eval(l.mdAutocompleteListItem);o[c]=n.item,e(a.contents())(o),a.attr({role:"option",id:"item_"+t.nextUid()})}return{require:"^?mdAutocomplete",terminal:!0,link:n,scope:!1}}angular.module("material.components.autocomplete").directive("mdAutocompleteListItem",e),e.$inject=["$compile","$mdUtil"]}();